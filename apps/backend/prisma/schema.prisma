// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  telegramId   String   @unique @map("telegram_id")
  username     String?
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  email        String?  @unique
  role         UserRole @default(USER)
  status       UserStatus @default(PENDING)
  features     String[] @default([])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastActiveAt DateTime? @map("last_active_at")

  // Relations
  botStates    UserBotState[]
  messages     BotMessage[]
  sessions     UserSession[]

  @@map("users")
}

model UserBotState {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  telegramId   String   @map("telegram_id")
  currentMode  BotMode  @map("current_mode")
  previousMode BotMode? @map("previous_mode")
  step         String?
  data         Json?
  timestamp    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_bot_states")
}

model BotMessage {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  telegramId String     @map("telegram_id")
  messageId Int         @map("message_id")
  chatId    BigInt      @map("chat_id")
  text      String?
  type      MessageType
  fileId    String?     @map("file_id")
  fileName  String?     @map("file_name")
  location  Json?
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bot_messages")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model BotCommand {
  id          String     @id @default(cuid())
  command     String     @unique
  description String
  feature     BotFeature
  adminOnly   Boolean    @default(false) @map("admin_only")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@map("bot_commands")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      ConfigType @default(STRING)
  encrypted Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_config")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String
  resource  String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING
}

enum BotMode {
  MENU
  LOCATION
  WORKBOOK
  ADMIN
}

enum BotFeature {
  LOCATION_TRACKING
  WORKBOOK_MANAGEMENT
  FILE_UPLOAD
  ADMIN_PANEL
}

enum MessageType {
  TEXT
  PHOTO
  DOCUMENT
  LOCATION
  CONTACT
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

model Location {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  latitude  Float
  longitude Float
  address   String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("locations")
}

model Workbook {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  title     String
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("workbooks")
}
